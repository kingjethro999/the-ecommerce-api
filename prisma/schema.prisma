generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(cuid())
  clerkUserId   String     @unique
  email         String     @unique
  firstName     String
  lastName      String
  name          String
  phone         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  password      String?
  status        UserStatus @default(ACTIVE)
  isVerified    Boolean    @default(true)
  token         String?
  resetExpiry   DateTime?

  // Relations
  orders  Order[]
  address String?
  city    String?
  state   String?
  zip     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String?

  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model Department {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  bannerImage String
  description String? //seo
  isActive    Boolean    @default(true)
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([slug])
  @@map("departments")
}

model Category {
  id           String     @id @default(cuid())
  name         String
  slug         String     @unique
  image        String
  bannerImage  String?
  description  String?
  isActive     Boolean    @default(true)
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@index([slug])
  @@index([departmentId])
  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  bannerImage String?
  logo        String?
  description String?
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@map("brands")
}

model Banner {
  id          String  @id @default(cuid())
  title       String
  description String?

  // Image handling
  imageUrl       String
  mobileImageUrl String? // Optional mobile-specific image

  // Navigation
  linkUrl  String?
  // Status and metadata
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

model Product {
  id                              String    @id @default(cuid())
  name                            String
  slug                            String    @unique
  imageUrl                        String?
  productImages                   String[]  @default([])
  description                     String?
  summary                         String? // Short description for product cards
  isActive                        Boolean   @default(true)
  isFeatured                      Boolean   @default(false)
  isDeal                          Boolean   @default(false)
  price                           Float
  buyingPrice                     Float?
  dealPrice                       Float?
  stockQty                        Int?
  lowStockAlert                   Int?      @default(5)
  discount                        Float? // Category relationships
  categoryId                      String?
  frequentlyBoughtTogetherItemIds String[]
  category                        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  // Brand relationship
  brandId                         String?
  brand                           Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)

  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@map("products")
}

// model Customer {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   firstName String?
//   lastName  String?
//   phone     String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("customers")
// }

model Order {
  id                    String        @id @default(cuid())
  orderNumber           String        @unique
  totalOrderAmount      Float
  transactionId         String?
  paymentStatus         PaymentStatus @default(PENDING)
  orderStatus           OrderStatus   @default(DELIVERED)
  userId                String
  trackingNumber        String?       @unique
  stripeCustomerId      String?
  stripePaymentIntentId String?       @unique

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency   String      @default("usd")
  orderItems OrderItem[]
  Payment    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderNumber])
  @@index([orderStatus])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl  String?
  title     String
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

enum OrderPaymentStatus {
  PENDING
  SUCCESS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Payment {
  id                    String        @id @default(cuid())
  orderId               String
  stripePaymentIntentId String        @unique
  amount                Float
  currency              String        @default("usd")
  status                PaymentStatus @default(PENDING)
  paymentMethod         String?

  // Stripe payment details
  stripeChargeId   String?
  stripeReceiptUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}
